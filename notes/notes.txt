BIG PICTURE: creating class means, I and the programmer using library can pass less stuff as parameters
Organization. one function frees everything - do not need to free return strings from csvField and do not need to create buffers for new string when updating
strtok does not account for ""

PUSH
    completely revamped with csvWizard 'object'/ added tons of functionality/ reading from file now more efficient (no reading every char)

7.12.23

EX 1 (raw)
    - reads as one long string.
    - Converts to rows (i.e. 2d array)
    - TO DO: Update option
    - TO DO: getField()

EX 2 (rows)

    - reads as 2d array (rows)
    - Indexes into 2d array
    - Converts to grid (array of linked lists)

NEW DATA STRUCT 2d array of strings (3d array)

Ex 3 (grid)

     - Reads as grid
     - Indexes into grid
     - Update grid - create csv section of update function (use internal bool if (edit_csv_permission))
     - Converts to dict

Ex 4 (dict_grid) TODO: Must use csvWholeFile()

    - Reads as dict_grid
    - Indexes into dict_grid
    - Update dict_grid and csv - change example to csv_update_function

Field Readers:
Ex 5 (direct to csv) - reads field with integer row/columns - allows update
Ex 6 (direct to csv) - reads field with int row/ string column name - does not allow update
Update_csv_index()
    - checks if file empty
Update_csv_index2()
    - uses findColumnIndex, then calls update_csv_index()

INDEX INTO:
grid DONE
dict - do not need to free return string anymore DONE



--- TODO: --
organize convert / updates  (TODO: Put updates in struct and adjust filenames csv_dict_reader to csvDictReader())

BUGS: csv only 3 rows, counts are off center
     csv only 1 row, seg fault
     
NOW: util.c
TO DO:
    Filter:
        - should return full rows, not just column
    Value Counts:
        - sorted array in aggregate struct


TO DO: filter returns column?
        - from scratch
            - v3 DONE
            - grid
            - dict
        - insert into existing DONE
            - v3 DONE
            - grid DONE
            - dict DONE
        - insert2 into existing DONE
            - v3 DONE
            - grid  DONE
            - dict  DONE
            - Auto-rearranges - Order does not matter! DONE

    - InsertRow2 does not protect against out of order columns in values[] DONE, now it does!

    - is_hex()
    - Drop column DONE (linked lists are fastest here. don't need to allocate new row for every row)
    - Drop row DONE
    - make double into single linked lists
    - change stats() to statsColumn()
    - median (25, 50, 75th percentile) DONE (does not take null values into consideration)
    - sort value counts
    - convert Excel to csv
    - print stats side by side
    - Sort rows by column - DONE all data structures (numeric & non_numeric & case/case insensitive)
         - get to correct column() DONE

    - Insert row DONE (creates data structure in memory)
    DO UPDATE STATS NEW ROW - if rowCount == 1 simply assigns min max to field .else just checks if set new record bc dont have to worry about old field like other version of update_stats()
    - set is_number (in update_stats and when creating stats) where it does not go back and forth for each num or non num

    - head/tail works only for grid DONE
    - replace works only for grid DONE
    - update needs to take value counts into consideration DONE

    - std DONE v3, grid, dict (note: pandas gives diff std, but when I check online, mine is correct)

    - rearrange columns
    - make stats treat Missing value different than 0

    - rewrite calc_std()
    - CONDITION DONE
        - do for all data structures DONE
            - grid_v3
            - grid
            - dict_grid
        - return new data structure instead of just printing

    - make it so findColumnIndex() can do both with and without quotes like get_field_dict

    - replace just in one column DONE
    - .csv.open() DONE

    - for get_field_raw/rows - is there a way to return strings other than stack/literal or last_retrieved?
        - getField(): printf("Get Field: %s, %s\n\n", myData.getField(&myData, 9,2), myData.getField(&myData, 9,2)); /* Get Field does not work with more than one instance in a printf() statement because (going left to right), it calls the function, but before using the string, has to call the other function, before printf() can return, so the  string from first instance of getField() is freed */
            - DONE, now returns string from data structure
            - TO DO: fieldReader() will need 2D array for last retrieved field....same with raw and rows
    - csv.fieldReader will only work with more than one iteration if last_retrieved_field is turned into 2d array
    - make csv.rowReader() to retrieve single row and rename rowReader()
    - make csv.columnReader()
    - Excel
    - convert_to_csv() does not work
    - Detect Bool 1 or 0
    - get_field_dict() requires header names to match I THINK DONE
    - .allData() instead of .grid .dict_grid
    - setting for print_grid_style and print row index
    - different delimiters
    - case sensitive value_counts
    - make value counts add in order
    - head/tail functions DONE
    - only print head/tails if over a certain amount of rows
    - sort value counts
    - update stats wont work in certain situations?
    - updateField1 and 2
    - update field with condition - return number of rows affected
    - make aggregate add on in reader functions its own function so code does not repear
    - drop column/row functions - need to make header part of aggregate. then make header() to retrieve column names
    - change 3 csv reader functions to not realloc - and change row_count-1 to current_row (init to 0)
    - How to not treat zip codes like numbers (won't get value counts)
    - distinguish between int and float

    if_error():
        - incorporate errno/strerror(errno)/perror() in if_error()
        - creates error_log_TIMESTAMP.csv file
    DONE:
        - make value counts separate for each column DONE
        - MAKE csv.reader like csv.dictReader (handle NULL values) DONE
        - Accounts for corner cases: - lots of new lines after data, more data after new lines. Keeps row count correct.
        - is_null/not_null not giving correct numbers DONE
        - make dict struct column_name point to self->header DONE
        - print better with rows index DONE
        - format header DONE
        - changeColumnName DONE


LATER:
Use tmp for realloc()
std and ValueCounts
make headerReader scan full row
printStats()
create freeDataStructures()




floats_with_commas()


does every data structure have an index into function and update function?
is every read function reading the whole file?
does every data structure free the raw once its read in and also after converted?


TO DO FRIDAY 7/21/23:
    - make grid_into_dict remove quotes DONE
    - add/remove quotes both versions in place true/false
    - organize convert and update functions

    - calc stats when reading file - keep in separate array!

    - header struct
        - number of non blank
        - blank
        - min
        - max
    v3 - 3d grid

    - make if_error create new error log for today
    - make build lnk list, append



- Sort functions (in place and not)
- get rid of .dict_grid, .grid. raw. .rows and just make it .data?
- resetdefault settings method
- backup method DONE
- how to accept filename?
- write to file methods DONE

- chagen if_error() to not end program DONE

print rows (of grid and dict_grid)
find longest row length during read.csvWholeFile and use that to print --- under header (make bool in struct)
- for printing and writing to file in loops, create string and do one print or fprintf()

make update_csv_index() to not read char by char
make read.csvHeader() not read char by char
write.dataToCSV() should fprint once per loop (also should try to copy grid to long string, then do 1 fprintf() and if not enough memory, then loop through doing fprintf())

get_uint()returns 0 when you just hit enter - maybe  thats fine
- make header do less reallocs (read 20 bytes, then realloc)
- make update_csv_index() do less reallocs
1. Fix csvReader() (make into a modified version of split_2darray_by, except splitting raw data string)

5. Static rowCount/columnCount static variable functions

print dict_grid like regular grid
csv permissions rename so its obvious it doesnt inlude writing to new csv

 - Names of reading functions should be more uniform

- use puts()?
scan larger block in read.csvHeader()

print_lnk_list() make take csvWizard *self
2. Create Open_file(), Print(), Free()

3. Create NEW EX Read as grid (db link list) example

4. Go through and make sure sequentially every data structure can be made on its own or turned into the next data structure
realloc  char by char?
im using twice the memory now?

Error Message is written wrong: says fread failed() in csvWholeFile()

Change inf_buffer to not be infinite

    uint16_t buffer_size = 25;
    for (int i = 0; i < 10; i++) {
        char s[buffer_size];
        if (fread(s, buffer_size, 1, file) != 1)
            buffer_size += 25;
    }

------------------------------------------

Declare backend private internal use funtions in .c file, not .h fileto hide them from use in programs.
Account for comments (no standard, so variable, default set to # or //, will have to use function to set)
Less Critical:
6. Read function pointers in Effective C book
ORganize code


Maybe do:
1. Function that keeps track of which data structure my code made as well as static pointer

Questions:

- In string_into_2d_array in the inner loop, line: else if (tmp == '\0' || current_row >= self->rowCount) - keep this in mind

If i have raw.data and grid.data, then how would I have raw.print, I would have to name the functions the same

WHY CANT CHAR_COUNT GO AFTER REALLOC???
- it can go in same code block as i++, but it also has to go in same code block as rowCount++;, otherwise, needs to go right after "scan"


                    ------- DONE -------
csv.rowReader -> csv.fileRowReader / fileRowReader DONE
does header handle null values? DONE
Change .read to .csv DONE
Calculates stats while parsing after file read DONE
aggregate DONE
backup csv function DONE
- Update_grid_index() DONE
- csvField2 should iterate over self->header instead of using fgetc() DONE
- Index_into_grid DONE
printHeader() still takes with_spaces bool DONE

- if you did not skip_header when reading, you can not skip header (only skip printing it twice) when passing fasle as skip_header arg in printData()
        - make skip_header part of struct and set to true as default DONE
Make read.csvWholeFile count rows DONE
    -Make string_int_2d_array() not change self->rowCount so that if we change if_error() to not end program, we might still have correct rowCount even if string_into_2d_array fails DONE
skip_header part of struct, set to true as default DONE
Changed everything to taking csvWizard *self as input DONE

change (*myObj.myFunc)() syntax to myObj.myFunc() DONE
Read whole file in one shot in other data structure methods DONE
Header is being read into raw file contents DONE
            - csv_dict_reader makes row 0 indexed as 1

Raw data gets cleared out if fileReader is called again, (but other data structures do not, for example if I use csv.rowReader or csv.reader and then csv.dictReader, I will have multiple data structures)

Notes on issue:
  I changed file read from char-by-char to whole file, in doing so, I had to reset file stream to get file size, but when I reset file stream, it read file frim begin of header. When I changed it so the file stream got to end of header, even when I adjusted buffer size, i got valgrind errors
  Solution: first, I only changed malloc size to file_size - header_size and forgot to change fread(), then I forgot to change buffer[file_size = '\0'] at end to buffer_size.

Lesson:
  having two file ptrs pointing to the same file is fine, but if I just reassign the first one 2 the 2nd one, the 1st place in mem will be lost
  trying to free a non-null ptr will give errors. If it is null, free() will kick it back and there will be no error
  reading less at a time is better. fread will fail if buffer does not get filled.
Obstacles:
  Handling null data (it was counting rows as it went and when it encountered a blank string it new it had collected a the last '\n' since '\n' gets turned into '\0', so made sure it had row count before hand so I knew when I was past the last row)

  - printf("Get Field: %s, %s\n\n", myData.getField(&myData, 9,2), myData.getField(&myData, 9,2)); /* Get Field does not work with more than one instance in a printf() statement because (going left to right), it calls the function, but before using the string, has to call the other function, before printf() can return, so the  string from first instance of getField() is freed */
       solution: creates last_retrieved_fieldS

  - It seems as though Valgrind forces realloc() to realloc to another location, because this exposes if any other pointers are now broken. If realloc() does not realloc to a new memory location, you can be fooled into thinking your pointers are still valid (which they are in that instance), but will not be in the even that realloc does have to realloc to a new location..

    - dict still will NOT work if columns in memory rearranged bc self->aggregate is still in column order - NOT SURE BENEFIT OF dict

WHY:
Talk about how my csv lib handles a bunch of new lines at the end better than python csv.reader()
- in examples go thru basic data analysis, clean up data etc

CORNER CASES:
    - if you want to use this library to create software that automatically scan in users data, need to account for these even if they are easy to clean up manually

Better Understand:
    - right align index print (%*ld max_row_digits)
    - format_number

How to handle Variables to have less inputs:
if affects more than 1 function, make it part of struct
if only affects 1 function, you pass it
Areas where grid_v3 is better areas where linked lists better